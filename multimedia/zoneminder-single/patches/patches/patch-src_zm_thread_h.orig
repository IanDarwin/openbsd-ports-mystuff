$OpenBSD$

Index: src/zm_thread.h
--- src/zm_thread.h.orig
+++ src/zm_thread.h
@@ -37,27 +37,15 @@ class RecursiveMutex;
 
 class ThreadException : public Exception {
 private:
-#ifndef SOLARIS
-  pid_t pid() {
-    pid_t tid; 
-#ifdef __FreeBSD__ 
-    long lwpid; 
-    thr_self(&lwpid); 
-    tid = lwpid; 
-#else 
-  #ifdef __FreeBSD_kernel__
-    if ( (syscall(SYS_thr_self, &tid)) < 0 ) // Thread/Process id
-  # else
-    tid=syscall(SYS_gettid); 
-  #endif
-#endif
-    return tid;
-  }  
-#else
-  pthread_t pid() { return( pthread_self() ); }
-#endif
+#include <sys/syscall.h>
+#include <unistd.h>
+    pid_t
+    gettid()
+    {
+        return syscall(SYS_getpid);
+    }
 public:
-  explicit ThreadException( const std::string &message ) : Exception( stringtf("(%d) ", (long int)pid())+message ) {
+  explicit ThreadException( const std::string &message ) : Exception( stringtf("(%d) ", (long int)getpid())+message ) {
   }
 };
 
@@ -225,23 +213,13 @@ class Thread { (protected)
   Thread();
   virtual ~Thread();
 
-#ifndef SOLARIS
-  pid_t id() const {
-    pid_t tid; 
-#ifdef __FreeBSD__ 
-    long lwpid; 
-    thr_self(&lwpid); 
-    tid = lwpid; 
-#else 
-  #ifdef __FreeBSD_kernel__
-    if ( (syscall(SYS_thr_self, &tid)) < 0 ) // Thread/Process id
-
-  #else
-    tid=syscall(SYS_gettid); 
-  #endif
-#endif
-    return tid;
-  }
+#include <sys/syscall.h>
+#include <unistd.h>
+    pid_t
+    gettid()
+    {
+        return syscall(SYS_getpid);
+    }
 #else
   pthread_t id() const {
     return pthread_self();
