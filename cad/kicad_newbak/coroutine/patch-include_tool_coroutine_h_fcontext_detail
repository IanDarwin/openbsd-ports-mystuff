$OpenBSD$

Index: include/tool/coroutine.h
--- include/tool/coroutine.h.orig
+++ include/tool/coroutine.h
@@ -31,7 +31,7 @@
 
 #include <type_traits>
 
-#include <system/libcontext.h>
+#include <boost/context/detail/fcontext.hpp>
 #include <memory>
 
 /**
@@ -77,7 +77,7 @@ class COROUTINE (private)
                                     // call context holds a reference to the main stack context
     };
 
-    using CONTEXT_T = libcontext::fcontext_t;
+    using CONTEXT_T = boost::context::detail::fcontext_t;
     using CALLEE_STORAGE = CONTEXT_T;
 
     class CALL_CONTEXT
@@ -92,9 +92,9 @@ class COROUTINE (private)
         {
             m_mainStackFunction = std::move( aFunc );
             INVOCATION_ARGS args{ INVOCATION_ARGS::CONTINUE_AFTER_ROOT, aCor, this };
-
-            libcontext::jump_fcontext( &aCor->m_callee, *m_mainStackContext,
-                reinterpret_cast<intptr_t>( &args ) );
+            auto transfer = boost::context::detail::jump_fcontext(*m_mainStackContext, &args);
+	    *m_mainStackContext = transfer.fctx;
+	    auto context = reinterpret_cast<intptr_t>(transfer.data);
         }
 
         void Continue( INVOCATION_ARGS* args )
@@ -304,7 +304,7 @@ class COROUTINE (private)
         // correct the stack size
         stackSize -= size_t( ( (ptrdiff_t) m_stack.get() + stackSize ) - (ptrdiff_t) sp );
 
-        m_callee = libcontext::make_fcontext( sp, stackSize, callerStub );
+        m_callee = boost::context::detail::make_fcontext( sp, stackSize, &callerStub );
         m_running = true;
 
         // off we go!
@@ -317,9 +317,9 @@ class COROUTINE (private)
     }
 
     /* real entry point of the coroutine */
-    static void callerStub( intptr_t aData )
+    static void callerStub( boost::context::detail::transfer_t aData )
     {
-        INVOCATION_ARGS& args = *reinterpret_cast<INVOCATION_ARGS*>( aData );
+        INVOCATION_ARGS& args = *reinterpret_cast<INVOCATION_ARGS*>( aData.data );
         // get pointer to self
         COROUTINE* cor     = args.destination;
         cor->m_callContext = args.context;
@@ -337,10 +337,9 @@ class COROUTINE (private)
 
     INVOCATION_ARGS* jumpIn( INVOCATION_ARGS* args )
     {
-        args = reinterpret_cast<INVOCATION_ARGS*>(
-            libcontext::jump_fcontext( &m_caller, m_callee,
-                                           reinterpret_cast<intptr_t>( args ) )
-            );
+        auto transfer = boost::context::detail::jump_fcontext( m_callee, args );
+	m_callee = transfer.fctx;
+        args = reinterpret_cast<INVOCATION_ARGS*>( reinterpret_cast<intptr_t>( transfer.data ) );
 
         return args;
     }
@@ -349,10 +348,9 @@ class COROUTINE (private)
     {
         INVOCATION_ARGS args{ INVOCATION_ARGS::FROM_ROUTINE, nullptr, nullptr };
         INVOCATION_ARGS* ret;
-        ret = reinterpret_cast<INVOCATION_ARGS*>(
-            libcontext::jump_fcontext( &m_callee, m_caller,
-                                           reinterpret_cast<intptr_t>( &args ) )
-            );
+        auto transfer = boost::context::detail::jump_fcontext( m_caller, &args );
+	m_caller = transfer.fctx;
+        ret = reinterpret_cast<INVOCATION_ARGS*>( reinterpret_cast<intptr_t>( &transfer.data ) );
 
         m_callContext = ret->context;
 
