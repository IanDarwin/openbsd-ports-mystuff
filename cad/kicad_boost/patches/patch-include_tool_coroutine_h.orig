$OpenBSD$

Index: include/tool/coroutine.h
--- include/tool/coroutine.h.orig
+++ include/tool/coroutine.h
@@ -31,9 +31,15 @@
 
 #include <type_traits>
 
-#include <system/libcontext.h>
+#include <boost/context/detail/fcontext.hpp>
 #include <memory>
+#include <sys/mman.h>
 
+using boost::context::detail::make_fcontext;
+using boost::context::detail::fcontext_t;
+using boost::context::detail::jump_fcontext;
+using boost::context::detail::transfer_t;
+
 /**
  *  Class COROUNTINE.
  *  Implements a coroutine. Wikipedia has a good explanation:
@@ -77,7 +83,7 @@ class COROUTINE (private)
                                     // call context holds a reference to the main stack context
     };
 
-    using CONTEXT_T = libcontext::fcontext_t;
+    using CONTEXT_T = fcontext_t;
     using CALLEE_STORAGE = CONTEXT_T;
 
     class CALL_CONTEXT
@@ -93,8 +99,9 @@ class COROUTINE (private)
             m_mainStackFunction = std::move( aFunc );
             INVOCATION_ARGS args{ INVOCATION_ARGS::CONTINUE_AFTER_ROOT, aCor, this };
 
-            libcontext::jump_fcontext( &aCor->m_callee, *m_mainStackContext,
-                reinterpret_cast<intptr_t>( &args ) );
+            transfer_t res = jump_fcontext( *m_mainStackContext, &args );
+            m_mainStackContext = &res.fctx;
+            args = *reinterpret_cast<INVOCATION_ARGS*>( res.data );
         }
 
         void Continue( INVOCATION_ARGS* args )
@@ -145,6 +152,8 @@ class COROUTINE (private)
 
     ~COROUTINE()
     {
+        if (m_stack)
+            munmap(m_stack.release(), c_defaultStackSize);
     }
 
 public:
@@ -296,7 +305,10 @@ class COROUTINE (private)
 
         // fixme: Clean up stack stuff. Add a guard
         size_t stackSize = c_defaultStackSize;
-        m_stack.reset( new char[stackSize] );
+	void *p = mmap(NULL, stackSize, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON | MAP_STACK, -1, 0);
+	if (p == MAP_FAILED)
+            throw std::bad_alloc();
+        m_stack.reset( static_cast<char *>(p) );
 
         // align to 16 bytes
         void* sp = (void*)((((ptrdiff_t) m_stack.get()) + stackSize - 0xf) & (~0x0f));
@@ -304,7 +316,7 @@ class COROUTINE (private)
         // correct the stack size
         stackSize -= size_t( ( (ptrdiff_t) m_stack.get() + stackSize ) - (ptrdiff_t) sp );
 
-        m_callee = libcontext::make_fcontext( sp, stackSize, callerStub );
+        m_callee = make_fcontext( sp, stackSize, callerStub );
         m_running = true;
 
         // off we go!
@@ -317,9 +329,9 @@ class COROUTINE (private)
     }
 
     /* real entry point of the coroutine */
-    static void callerStub( intptr_t aData )
+    static void callerStub( transfer_t aData )
     {
-        INVOCATION_ARGS& args = *reinterpret_cast<INVOCATION_ARGS*>( aData );
+        INVOCATION_ARGS& args = *reinterpret_cast<INVOCATION_ARGS*>( aData.data );
         // get pointer to self
         COROUTINE* cor     = args.destination;
         cor->m_callContext = args.context;
@@ -337,10 +349,9 @@ class COROUTINE (private)
 
     INVOCATION_ARGS* jumpIn( INVOCATION_ARGS* args )
     {
-        args = reinterpret_cast<INVOCATION_ARGS*>(
-            libcontext::jump_fcontext( &m_caller, m_callee,
-                                           reinterpret_cast<intptr_t>( args ) )
-            );
+        transfer_t res = jump_fcontext( m_callee, args );
+	m_callee = res.fctx;
+        args = reinterpret_cast<INVOCATION_ARGS*>( res.data );
 
         return args;
     }
@@ -349,10 +360,9 @@ class COROUTINE (private)
     {
         INVOCATION_ARGS args{ INVOCATION_ARGS::FROM_ROUTINE, nullptr, nullptr };
         INVOCATION_ARGS* ret;
-        ret = reinterpret_cast<INVOCATION_ARGS*>(
-            libcontext::jump_fcontext( &m_callee, m_caller,
-                                           reinterpret_cast<intptr_t>( &args ) )
-            );
+	transfer_t res = jump_fcontext( m_caller, &args );
+	m_caller = res.fctx;
+        ret = reinterpret_cast<INVOCATION_ARGS*>( res.data );
 
         m_callContext = ret->context;
 
