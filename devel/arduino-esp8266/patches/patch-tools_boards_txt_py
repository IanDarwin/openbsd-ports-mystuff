$OpenBSD$

Index: tools/boards.txt.py
--- tools/boards.txt.py.orig
+++ tools/boards.txt.py
@@ -908,7 +908,7 @@ macros = {
 
 def checkdir ():
     if not os.path.isfile("boards.txt"):
-        print "please run me from boards.txt directory (like: ./tools/boards.txt.py -...)"
+        print("please run me from boards.txt directory (like: ./tools/boards.txt.py -...)")
         sys.exit(1)
 
 ################################################################
@@ -1023,29 +1023,29 @@ def flash_size (size_bytes, display, optname, ld, desc
             page = 0x100
             block = 0x2000
 
-        print "/* Flash Split for %s chips */" % display
-        print "/* sketch %dKB */" % (max_upload_size / 1024)
+        print("/* Flash Split for %s chips */" % display)
+        print("/* sketch %dKB */" % (max_upload_size / 1024))
         if spiffs_size > 0:
             empty_size = spiffs_start - max_upload_size - 4096
             if empty_size > 1024:
-                print "/* empty  %dKB */" % (empty_size / 1024)
-            print "/* spiffs %dKB */" % (spiffs_size / 1024)
-        print "/* eeprom 20KB */"
-        print ""
-        print "MEMORY"
-        print "{"
-        print "  dport0_0_seg :                        org = 0x3FF00000, len = 0x10"
-        print "  dram0_0_seg :                         org = 0x3FFE8000, len = 0x14000"
-        print "  iram1_0_seg :                         org = 0x40100000, len = 0x8000"
-        print "  irom0_0_seg :                         org = 0x40201010, len = 0x%x" % max_upload_size
-        print "}"
-        print ""
-        print "PROVIDE ( _SPIFFS_start = 0x%08X );" % (0x40200000 + spiffs_start)
-        print "PROVIDE ( _SPIFFS_end = 0x%08X );" % (0x40200000 + spiffs_start + spiffs_size)
-        print "PROVIDE ( _SPIFFS_page = 0x%X );" % page
-        print "PROVIDE ( _SPIFFS_block = 0x%X );" % block
-        print ""
-        print 'INCLUDE "../ld/eagle.app.v6.common.ld"'
+                print("/* empty  %dKB */" % (empty_size / 1024))
+            print("/* spiffs %dKB */" % (spiffs_size / 1024))
+        print("/* eeprom 20KB */")
+        print("")
+        print("MEMORY")
+        print("{")
+        print("  dport0_0_seg :                        org = 0x3FF00000, len = 0x10")
+        print("  dram0_0_seg :                         org = 0x3FFE8000, len = 0x14000")
+        print("  iram1_0_seg :                         org = 0x40100000, len = 0x8000")
+        print("  irom0_0_seg :                         org = 0x40201010, len = 0x%x" % max_upload_size)
+        print("}")
+        print("")
+        print("PROVIDE ( _SPIFFS_start = 0x%08X );" % (0x40200000 + spiffs_start))
+        print("PROVIDE ( _SPIFFS_end = 0x%08X );" % (0x40200000 + spiffs_start + spiffs_size))
+        print("PROVIDE ( _SPIFFS_page = 0x%X );" % page)
+        print("PROVIDE ( _SPIFFS_block = 0x%X );" % block)
+        print("")
+        print('INCLUDE "../ld/eagle.app.v6.common.ld"')
 
         if ldgen:
             sys.stdout.close()
@@ -1115,35 +1115,35 @@ def all_boards ():
     macros.update(all_debug())
     macros.update(led(led_default, led_max))
 
-    print '#'
-    print '# this file is script-generated and is likely to be overwritten by ' + os.path.basename(sys.argv[0])
-    print '#'
-    print ''
-    print 'menu.BoardModel=Model'
-    print 'menu.UploadSpeed=Upload Speed'
-    print 'menu.CpuFrequency=CPU Frequency'
-    print 'menu.CrystalFreq=Crystal Frequency'
-    print 'menu.FlashSize=Flash Size'
-    print 'menu.FlashMode=Flash Mode'
-    print 'menu.FlashFreq=Flash Frequency'
-    print 'menu.ResetMethod=Reset Method'
-    print 'menu.ESPModule=Module'
-    print 'menu.Debug=Debug port'
-    print 'menu.DebugLevel=Debug Level'
-    print 'menu.LwIPVariant=lwIP Variant'
-    print 'menu.led=Builtin Led'
-    print 'menu.FlashErase=Erase Flash'
-    print ''
+    print('#')
+    print('# this file is script-generated and is likely to be overwritten by ' + os.path.basename(sys.argv[0]))
+    print('#')
+    print('')
+    print('menu.BoardModel=Model')
+    print('menu.UploadSpeed=Upload Speed')
+    print('menu.CpuFrequency=CPU Frequency')
+    print('menu.CrystalFreq=Crystal Frequency')
+    print('menu.FlashSize=Flash Size')
+    print('menu.FlashMode=Flash Mode')
+    print('menu.FlashFreq=Flash Frequency')
+    print('menu.ResetMethod=Reset Method')
+    print('menu.ESPModule=Module')
+    print('menu.Debug=Debug port')
+    print('menu.DebugLevel=Debug Level')
+    print('menu.LwIPVariant=lwIP Variant')
+    print('menu.led=Builtin Led')
+    print('menu.FlashErase=Erase Flash')
+    print('')
 
     for id in boards:
-        print '##############################################################'
+        print('##############################################################')
         board = boards[id]
-        print id + '.name=' + board['name']
+        print(id + '.name=' + board['name'])
 
         # standalone options
         if 'opts' in board:
             for optname in board['opts']:
-                print id + optname + '=' + board['opts'][optname]
+                print(id + optname + '=' + board['opts'][optname])
 
         # macros
         macrolist = [ 'defaults', 'cpufreq_menu', ]
@@ -1156,7 +1156,7 @@ def all_boards ():
         macrolist += [ 'debug_menu', 'flash_erase_menu' ]
 
         for cs in customspeeds:
-            print id + cs
+            print(id + cs)
 
         if 'serial' in board:
             macrolist += speeds[board['serial']]
@@ -1166,12 +1166,12 @@ def all_boards ():
         for block in macrolist:
             for optname in macros[block]:
                 if not ('opts' in board) or not (optname in board['opts']):
-                    print id + optname + '=' + macros[block][optname]
+                    print(id + optname + '=' + macros[block][optname])
 
         if nofloat:
-            print id + '.build.float='
+            print(id + '.build.float=')
 
-        print ''
+        print('')
 
     if boardsgen:
         sys.stdout.close()
@@ -1225,25 +1225,25 @@ def doc ():
         realstdout = sys.stdout
         sys.stdout = open("doc/boards.rst", 'w')
 
-    print 'Boards'
-    print '======'
-    print ''
+    print('Boards')
+    print('======')
+    print('')
 
     for id in boards:
         board = boards[id]
-        print board['name']
+        print(board['name'])
         dash = ""
         for i in range(len(board['name'])):
             dash += '-'
-        print dash
+        print(dash)
 
-        print ''
+        print('')
         if 'desc' in board:
             for line in board['desc']:
-                print line
+                print(line)
         else:
-            print 'No description'
-        print ''
+            print('No description')
+        print('')
 
     if docgen:
         sys.stdout.close()
@@ -1253,35 +1253,35 @@ def doc ():
 # help / usage
 
 def usage (name,ret):
-    print ""
-    print "boards.txt generator for esp8266/Arduino"
-    print ""
-    print "usage: %s [options]" % name
-    print ""
-    print " -h, --help"
-    print " --lwip          - preferred default lwIP version (default %d)" % lwip
-    print " --led           - preferred default builtin led for generic boards (default %d)" % led_default
-    print " --board b       - board to modify:"
-    print " --speed s       - change default serial speed"
-    print " --customspeed s - new serial speed for all boards"
-    print " --nofloat       - disable float support in printf/scanf"
-    print ""
-    print " mandatory option (at least one):"
-    print ""
-    print " --boards        - show boards.txt"
-    print " --boardsgen     - replace boards.txt"
-    print " --ld            - show ldscripts"
-    print " --ldgen         - replace ldscripts"
-    print " --package       - show package"
-    print " --packagegen    - replace board:[] in package"
-    print " --doc           - shows doc/boards.rst"
-    print " --docgen        - replace doc/boards.rst"
-    print ""
+    print("")
+    print("boards.txt generator for esp8266/Arduino")
+    print("")
+    print("usage: %s [options]" % name)
+    print("")
+    print(" -h, --help")
+    print(" --lwip          - preferred default lwIP version (default %d)" % lwip)
+    print(" --led           - preferred default builtin led for generic boards (default %d)" % led_default)
+    print(" --board b       - board to modify:")
+    print(" --speed s       - change default serial speed")
+    print(" --customspeed s - new serial speed for all boards")
+    print(" --nofloat       - disable float support in printf/scanf")
+    print("")
+    print(" mandatory option (at least one):")
+    print("")
+    print(" --boards        - show boards.txt")
+    print(" --boardsgen     - replace boards.txt")
+    print(" --ld            - show ldscripts")
+    print(" --ldgen         - replace ldscripts")
+    print(" --package       - show package")
+    print(" --packagegen    - replace board:[] in package")
+    print(" --doc           - shows doc/boards.rst")
+    print(" --docgen        - replace doc/boards.rst")
+    print("")
 
     out = ""
     for s in speeds:
         out += s + ' '
-    print "available serial speed options (kbps):", out
+    print("available serial speed options (kbps):", out)
 
     out = ""
     for b in boards:
@@ -1291,9 +1291,9 @@ def usage (name,ret):
         else:
             out += default_speed
         out += 'k) '
-    print "available board names:", out
+    print("available board names:", out)
 
-    print ""
+    print("")
 
     sys.exit(ret)
 
@@ -1323,7 +1323,7 @@ try:
         [ "help", "lwip=", "led=", "speed=", "board=", "customspeed=", "nofloat",
           "ld", "ldgen", "boards", "boardsgen", "package", "packagegen", "doc", "docgen" ])
 except getopt.GetoptError as err:
-    print str(err)  # will print something like "option -a not recognized"
+    print(str(err)) # will print something like "option -a not recognized"
     usage(sys.argv[0], 1)
 
 no = '(not set)'
@@ -1347,16 +1347,16 @@ for o, a in opts:
 
     elif o in ("--board"):
         if not a in boards:
-            print "board %s not available" % a
+            print("board %s not available" % a)
             usage(sys.argv[0], 1)
         board = a
 
     elif o in ("--speed"):
         if board == no:
-            print "board not set"
+            print("board not set")
             usage(sys.argv[0], 1)
         if not a in speeds:
-            print "speed %s not available" % a
+            print("speed %s not available" % a)
             usage(sys.argv[0], 1)
         boards[board]['serial'] = a
 
