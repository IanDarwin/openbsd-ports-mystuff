$OpenBSD$

Index: libstdc++-v3/include/bits/regex_compiler.tcc
--- libstdc++-v3/include/bits/regex_compiler.tcc.orig
+++ libstdc++-v3/include/bits/regex_compiler.tcc
@@ -55,6 +55,8 @@
 // All dummy nodes will be eliminated at the end of compilation.
 */
 
+#define __EXCSTR(s) (__extension__({static const char __exception_what__[] __attribute__((section(".irom.exceptiontext,\"MS\",@progbits,1#"))) = (s); &__exception_what__[0];}))
+
 namespace std _GLIBCXX_VISIBILITY(default)
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
@@ -165,7 +167,7 @@ namespace __detail
 	  this->_M_disjunction();
 	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
 	    __throw_regex_error(regex_constants::error_paren,
-				"Parenthesis is not closed.");
+				__EXCSTR("Parenthesis is not closed."));
 	  auto __tmp = _M_pop();
 	  __tmp._M_append(_M_nfa->_M_insert_accept());
 	  _M_stack.push(
@@ -188,7 +190,7 @@ namespace __detail
 	{
 	  if (_M_stack.empty())
 	    __throw_regex_error(regex_constants::error_badrepeat,
-				"Nothing to repeat before a quantifier.");
+				__EXCSTR("Nothing to repeat before a quantifier."));
 	  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);
 	};
       if (_M_match_token(_ScannerT::_S_token_closure0))
@@ -225,10 +227,10 @@ namespace __detail
 	{
 	  if (_M_stack.empty())
 	    __throw_regex_error(regex_constants::error_badrepeat,
-				"Nothing to repeat before a quantifier.");
+				__EXCSTR("Nothing to repeat before a quantifier."));
 	  if (!_M_match_token(_ScannerT::_S_token_dup_count))
 	    __throw_regex_error(regex_constants::error_badbrace,
-				"Unexpected token in brace expression.");
+				__EXCSTR("Unexpected token in brace expression."));
 	  _StateSeqT __r(_M_pop());
 	  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());
 	  long __min_rep = _M_cur_int_value(10);
@@ -245,7 +247,7 @@ namespace __detail
 	    __n = 0;
 	  if (!_M_match_token(_ScannerT::_S_token_interval_end))
 	    __throw_regex_error(regex_constants::error_brace,
-				"Unexpected end of brace expression.");
+				__EXCSTR("Unexpected end of brace expression."));
 
 	  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);
 
@@ -265,7 +267,7 @@ namespace __detail
 	    {
 	      if (__n < 0)
 		__throw_regex_error(regex_constants::error_badbrace,
-				    "Invalid range in brace expression.");
+				    __EXCSTR("Invalid range in brace expression."));
 	      auto __end = _M_nfa->_M_insert_dummy();
 	      // _M_alt is the "match more" branch, and _M_next is the
 	      // "match less" one. Switch _M_alt and _M_next of all created
@@ -333,7 +335,7 @@ namespace __detail
 	  this->_M_disjunction();
 	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
 	    __throw_regex_error(regex_constants::error_paren,
-				"Parenthesis is not closed.");
+				__EXCSTR("Parenthesis is not closed."));
 	  __r._M_append(_M_pop());
 	  _M_stack.push(__r);
 	}
@@ -343,7 +345,7 @@ namespace __detail
 	  this->_M_disjunction();
 	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
 	    __throw_regex_error(regex_constants::error_paren,
-				"Parenthesis is not closed.");
+				__EXCSTR("Parenthesis is not closed."));
 	  __r._M_append(_M_pop());
 	  __r._M_append(_M_nfa->_M_insert_subexpr_end());
 	  _M_stack.push(__r);
@@ -519,9 +521,9 @@ namespace __detail
 		    }
 		  __throw_regex_error(
 		    regex_constants::error_range,
-		    "Unexpected dash in bracket expression. For POSIX syntax, "
+		    __EXCSTR("Unexpected dash in bracket expression. For POSIX syntax, "
 		    "a dash is not treated literally only when it is at "
-		    "beginning or end.");
+		    "beginning or end."));
 		}
 	      __push_char('-');
 	    }
@@ -543,7 +545,7 @@ namespace __detail
 		      != _ScannerT::_S_token_bracket_end)
 		    __throw_regex_error(
 		      regex_constants::error_range,
-		      "Character is expected after a dash.");
+		      __EXCSTR("Character is expected after a dash."));
 		  __push_char('-');
 		}
 	    }
@@ -557,7 +559,7 @@ namespace __detail
 	}
       else
 	__throw_regex_error(regex_constants::error_brack,
-			    "Unexpected character in bracket expression.");
+			    __EXCSTR("Unexpected character in bracket expression."));
 
       return true;
     }
@@ -639,3 +641,5 @@ namespace __detail
 
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace
+
+#undef __EXCSTR
