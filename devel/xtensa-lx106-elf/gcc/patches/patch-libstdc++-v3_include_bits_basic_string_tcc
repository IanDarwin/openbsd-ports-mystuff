$OpenBSD$

Index: libstdc++-v3/include/bits/basic_string.tcc
--- libstdc++-v3/include/bits/basic_string.tcc.orig
+++ libstdc++-v3/include/bits/basic_string.tcc
@@ -41,6 +41,8 @@
 
 #pragma GCC system_header
 
+#define __EXCSTR(s) (__extension__({static const char __exception_what__[] __attribute__((section(".irom.exceptiontext,\"MS\",@progbits,1#"))) = (s); &__exception_what__[0];}))
+
 #include <bits/cxxabi_forced.h>
 
 namespace std _GLIBCXX_VISIBILITY(default)
@@ -572,7 +574,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 #endif
 	// NB: Not required, but considered best practice.
 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
-	  __throw_logic_error(__N("basic_string::_S_construct null not valid"));
+	  __throw_logic_error(__EXCSTR(__N("basic_string::_S_construct null not valid")));
 
 	const size_type __dnew = static_cast<size_type>(std::distance(__beg,
 								      __end));
@@ -636,7 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     basic_string(const basic_string& __str, size_type __pos, size_type __n)
     : _M_dataplus(_S_construct(__str._M_data()
 			       + __str._M_check(__pos,
-						"basic_string::basic_string"),
+						__EXCSTR("basic_string::basic_string")),
 			       __str._M_data() + __str._M_limit(__pos, __n)
 			       + __pos, _Alloc()), _Alloc())
     { }
@@ -647,7 +649,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 		 size_type __n, const _Alloc& __a)
     : _M_dataplus(_S_construct(__str._M_data()
 			       + __str._M_check(__pos,
-						"basic_string::basic_string"),
+						__EXCSTR("basic_string::basic_string")),
 			       __str._M_data() + __str._M_limit(__pos, __n)
 			       + __pos, __a), __a)
     { }
@@ -711,7 +713,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     assign(const _CharT* __s, size_type __n)
     {
       __glibcxx_requires_string_len(__s, __n);
-      _M_check_length(this->size(), __n, "basic_string::assign");
+      _M_check_length(this->size(), __n, __EXCSTR("basic_string::assign"));
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 	return _M_replace_safe(size_type(0), this->size(), __s, __n);
       else
@@ -734,7 +736,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     {
       if (__n)
 	{
-	  _M_check_length(size_type(0), __n, "basic_string::append");	  
+	  _M_check_length(size_type(0), __n, __EXCSTR("basic_string::append"));	  
 	  const size_type __len = __n + this->size();
 	  if (__len > this->capacity() || _M_rep()->_M_is_shared())
 	    this->reserve(__len);
@@ -752,7 +754,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       __glibcxx_requires_string_len(__s, __n);
       if (__n)
 	{
-	  _M_check_length(size_type(0), __n, "basic_string::append");
+	  _M_check_length(size_type(0), __n, __EXCSTR("basic_string::append"));
 	  const size_type __len = __n + this->size();
 	  if (__len > this->capacity() || _M_rep()->_M_is_shared())
 	    {
@@ -793,7 +795,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     basic_string<_CharT, _Traits, _Alloc>::
     append(const basic_string& __str, size_type __pos, size_type __n)
     {
-      __str._M_check(__pos, "basic_string::append");
+      __str._M_check(__pos, __EXCSTR("basic_string::append"));
       __n = __str._M_limit(__pos, __n);
       if (__n)
 	{
@@ -812,8 +814,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
      insert(size_type __pos, const _CharT* __s, size_type __n)
      {
        __glibcxx_requires_string_len(__s, __n);
-       _M_check(__pos, "basic_string::insert");
-       _M_check_length(size_type(0), __n, "basic_string::insert");
+       _M_check(__pos, __EXCSTR("basic_string::insert"));
+       _M_check_length(size_type(0), __n, __EXCSTR("basic_string::insert"));
        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
          return _M_replace_safe(__pos, size_type(0), __s, __n);
        else
@@ -867,9 +869,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	     size_type __n2)
      {
        __glibcxx_requires_string_len(__s, __n2);
-       _M_check(__pos, "basic_string::replace");
+       _M_check(__pos, __EXCSTR("basic_string::replace"));
        __n1 = _M_limit(__pos, __n1);
-       _M_check_length(__n1, __n2, "basic_string::replace");
+       _M_check_length(__n1, __n2, __EXCSTR("basic_string::replace"));
        bool __left;
        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
          return _M_replace_safe(__pos, __n1, __s, __n2);
@@ -1002,7 +1004,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       // _GLIBCXX_RESOLVE_LIB_DEFECTS
       // 83.  String::npos vs. string::max_size()
       if (__capacity > _S_max_size)
-	__throw_length_error(__N("basic_string::_S_create"));
+	__throw_length_error(__EXCSTR(__N("basic_string::_S_create")));
 
       // The standard places no restriction on allocating more memory
       // than is strictly needed within this layer at the moment or as
@@ -1093,7 +1095,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     resize(size_type __n, _CharT __c)
     {
       const size_type __size = this->size();
-      _M_check_length(__size, __n, "basic_string::resize");
+      _M_check_length(__size, __n, __EXCSTR("basic_string::resize"));
       if (__size < __n)
 	this->append(__n - __size, __c);
       else if (__n < __size)
@@ -1110,7 +1112,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
       {
 	const basic_string __s(__k1, __k2);
 	const size_type __n1 = __i2 - __i1;
-	_M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
+	_M_check_length(__n1, __s.size(), __EXCSTR("basic_string::_M_replace_dispatch"));
 	return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
 			       __s.size());
       }
@@ -1121,7 +1123,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
 		   _CharT __c)
     {
-      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
+      _M_check_length(__n1, __n2, __EXCSTR("basic_string::_M_replace_aux"));
       _M_mutate(__pos1, __n1, __n2);
       if (__n2)
 	_M_assign(_M_data() + __pos1, __n2, __c);
@@ -1145,7 +1147,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     basic_string<_CharT, _Traits, _Alloc>::
     copy(_CharT* __s, size_type __n, size_type __pos) const
     {
-      _M_check(__pos, "basic_string::copy");
+      _M_check(__pos, __EXCSTR("basic_string::copy"));
       __n = _M_limit(__pos, __n);
       __glibcxx_requires_string_len(__s, __n);
       if (__n)
@@ -1395,7 +1397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     basic_string<_CharT, _Traits, _Alloc>::
     compare(size_type __pos, size_type __n, const basic_string& __str) const
     {
-      _M_check(__pos, "basic_string::compare");
+      _M_check(__pos, __EXCSTR("basic_string::compare"));
       __n = _M_limit(__pos, __n);
       const size_type __osize = __str.size();
       const size_type __len = std::min(__n, __osize);
@@ -1411,8 +1413,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     compare(size_type __pos1, size_type __n1, const basic_string& __str,
 	    size_type __pos2, size_type __n2) const
     {
-      _M_check(__pos1, "basic_string::compare");
-      __str._M_check(__pos2, "basic_string::compare");
+      _M_check(__pos1, __EXCSTR("basic_string::compare"));
+      __str._M_check(__pos2, __EXCSTR("basic_string::compare"));
       __n1 = _M_limit(__pos1, __n1);
       __n2 = __str._M_limit(__pos2, __n2);
       const size_type __len = std::min(__n1, __n2);
@@ -1444,7 +1446,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     compare(size_type __pos, size_type __n1, const _CharT* __s) const
     {
       __glibcxx_requires_string(__s);
-      _M_check(__pos, "basic_string::compare");
+      _M_check(__pos, __EXCSTR("basic_string::compare"));
       __n1 = _M_limit(__pos, __n1);
       const size_type __osize = traits_type::length(__s);
       const size_type __len = std::min(__n1, __osize);
@@ -1461,7 +1463,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 	    size_type __n2) const
     {
       __glibcxx_requires_string_len(__s, __n2);
-      _M_check(__pos, "basic_string::compare");
+      _M_check(__pos, __EXCSTR("basic_string::compare"));
       __n1 = _M_limit(__pos, __n1);
       const size_type __len = std::min(__n1, __n2);
       int __r = traits_type::compare(_M_data() + __pos, __s, __len);
@@ -1661,5 +1663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace std
+
+#undef __EXCSTR
 
 #endif
