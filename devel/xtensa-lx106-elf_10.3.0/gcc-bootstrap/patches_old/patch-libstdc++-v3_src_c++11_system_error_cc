$OpenBSD$

Index: libstdc++-v3/src/c++11/system_error.cc
--- libstdc++-v3/src/c++11/system_error.cc.orig
+++ libstdc++-v3/src/c++11/system_error.cc
@@ -30,8 +30,11 @@
 #include <bits/functexcept.h>
 #include <limits>
 #include <errno.h>
+#include <cstdlib>
 #undef __sso_string
 
+#define __EXCSTR(s) (__extension__({static const char __exception_what__[] __attribute__((section(".irom.exceptiontext,\"MS\",@progbits,1#"))) = (s); &__exception_what__[0];}))
+
 namespace
 {
   using std::string;
@@ -40,7 +43,7 @@ namespace
   {
     virtual const char*
     name() const noexcept
-    { return "generic"; }
+    { return __EXCSTR("generic"); }
 
     _GLIBCXX_DEFAULT_ABI_TAG
     virtual string
@@ -48,7 +51,9 @@ namespace
     {
       // XXX locale issues: how does one get or set loc.
       // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)
-      return string(strerror(i));
+      //return string(strerror(i));
+      char buff[16];
+      return string(itoa(i, buff, 10));
     }
   };
 
@@ -56,7 +61,7 @@ namespace
   {
     virtual const char*
     name() const noexcept
-    { return "system"; }
+    { return __EXCSTR("system"); }
 
     _GLIBCXX_DEFAULT_ABI_TAG
     virtual string
@@ -64,7 +69,9 @@ namespace
     {
       // XXX locale issues: how does one get or set loc.
       // _GLIBCXX_HAVE_STRERROR_L, strerror_l(i, cloc)
-      return string(strerror(i));
+      //return string(strerror(i));
+      char buff[16];
+      return string(itoa(i, buff, 10));
     }
 
     virtual std::error_condition
